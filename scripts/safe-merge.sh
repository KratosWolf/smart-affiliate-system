#!/bin/bash
# üîÄ SAFE MERGE SYSTEM - Merge Seguro com Valida√ß√£o Total
# Garante que branch s√≥ faz merge se passar em TODAS as verifica√ß√µes

echo "üîÄ Safe Merge System - Valida√ß√£o Total"
echo "======================================"

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

ERRORS=0

# Fun√ß√£o para executar comando e verificar resultado
run_check() {
    local description=$1
    local command=$2
    local critical=${3:-true}
    
    echo -e "${BLUE}üîç $description${NC}"
    
    if eval "$command"; then
        echo -e "${GREEN}   ‚úÖ Passou${NC}"
        return 0
    else
        echo -e "${RED}   ‚ùå Falhou${NC}"
        if [ "$critical" = true ]; then
            ERRORS=$((ERRORS + 1))
        fi
        return 1
    fi
}

# Fun√ß√£o para verificar branch atual
check_current_branch() {
    local current_branch=$(git branch --show-current)
    
    if [ "$current_branch" = "main" ]; then
        echo -e "${RED}‚ùå ERRO: Voc√™ est√° na branch main!${NC}"
        echo -e "${YELLOW}   ‚Üí Use este script apenas em feature branches${NC}"
        echo -e "${YELLOW}   ‚Üí Para criar nova branch: npm run branch nome-da-feature${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Branch atual: $current_branch${NC}"
    return 0
}

# Fun√ß√£o para fazer backup antes de merge
create_merge_backup() {
    local current_branch=$(git branch --show-current)
    local timestamp=$(date +"%Y%m%d-%H%M%S")
    local backup_tag="merge-backup-$current_branch-$timestamp"
    
    echo -e "${BLUE}üíæ Criando backup antes do merge...${NC}"
    git tag -a "$backup_tag" -m "Backup before merging $current_branch"
    git push origin --tags
    echo -e "${GREEN}‚úÖ Backup criado: $backup_tag${NC}"
}

# Fun√ß√£o principal de valida√ß√£o
validate_for_merge() {
    echo -e "${PURPLE}üõ°Ô∏è EXECUTANDO VALIDA√á√ïES OBRIGAT√ìRIAS${NC}"
    echo "============================================="
    
    # 1. VERIFICAR CONSIST√äNCIA
    run_check "Verificando consist√™ncia do projeto" "./scripts/check-consistency.sh"
    
    # 2. LIMPAR PROCESSOS NPM
    run_check "Limpando processos NPM duplicados" "npm run clean:npm" false
    
    # 3. INSTALAR DEPEND√äNCIAS
    run_check "Verificando depend√™ncias" "npm install"
    
    # 4. TYPESCRIPT CHECK
    run_check "Verificando TypeScript" "npm run type-check"
    
    # 5. LINTING
    run_check "Verificando ESLint" "npm run lint"
    
    # 6. BUILD COMPLETO
    run_check "Testando build completo" "npm run build"
    
    # 7. TESTAR TODOS M√ìDULOS
    run_check "Testando todos os m√≥dulos" "./scripts/test-all-modules.sh"
    
    # 8. VERIFICAR SE MAIN EST√Å ATUALIZADA
    echo -e "${BLUE}üîÑ Verificando se main est√° atualizada...${NC}"
    git fetch origin main
    
    local commits_behind=$(git rev-list --count HEAD..origin/main)
    if [ $commits_behind -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Sua branch est√° $commits_behind commits atr√°s da main${NC}"
        read -p "Fazer rebase com main? (recomendado) (y/n): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git rebase origin/main
            if [ $? -ne 0 ]; then
                echo -e "${RED}‚ùå Conflito no rebase! Resolva manualmente${NC}"
                ERRORS=$((ERRORS + 1))
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è Continuando sem rebase (n√£o recomendado)${NC}"
        fi
    fi
    
    return $ERRORS
}

# Fun√ß√£o para executar merge
execute_merge() {
    local current_branch=$(git branch --show-current)
    
    echo -e "${PURPLE}üîÄ EXECUTANDO MERGE SEGURO${NC}"
    echo "================================="
    
    # Mudar para main
    echo -e "${BLUE}üîÑ Mudando para branch main...${NC}"
    git checkout main
    git pull origin main
    
    # Fazer merge
    echo -e "${BLUE}üîÄ Fazendo merge de '$current_branch'...${NC}"
    git merge --no-ff "$current_branch" -m "feat: merge $current_branch
    
    ‚úÖ Todas as verifica√ß√µes passaram
    üß™ Todos os m√≥dulos testados
    üèóÔ∏è Build OK
    üõ°Ô∏è Governan√ßa verificada"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Merge realizado com sucesso!${NC}"
        
        # Push para origin
        git push origin main
        
        # Deletar branch local e remota
        read -p "Deletar branch '$current_branch'? (y/n): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git branch -d "$current_branch"
            git push origin --delete "$current_branch"
            echo -e "${GREEN}‚úÖ Branch '$current_branch' deletada${NC}"
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå Falha no merge!${NC}"
        git checkout "$current_branch"
        return 1
    fi
}

# MAIN SCRIPT
main() {
    echo -e "${BLUE}üå≥ SMART SAFE MERGE SYSTEM${NC}"
    echo "=============================="
    
    # Verificar se est√° em feature branch
    check_current_branch
    
    local current_branch=$(git branch --show-current)
    echo -e "${YELLOW}üìã Preparando merge de: '$current_branch' ‚Üí main${NC}"
    echo ""
    
    # Executar todas as valida√ß√µes
    if validate_for_merge; then
        echo ""
        echo -e "${GREEN}üéâ TODAS AS VALIDA√á√ïES PASSARAM!${NC}"
        echo -e "${GREEN}‚úÖ Branch est√° segura para merge${NC}"
        echo ""
        
        # Criar backup
        create_merge_backup
        
        # Perguntar se quer continuar com merge
        read -p "üîÄ Executar merge agora? (y/n): " -n 1 -r
        echo ""
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            execute_merge
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}üéâ MERGE CONCLU√çDO COM SUCESSO!${NC}"
                echo -e "${GREEN}‚úÖ Sistema permanece est√°vel${NC}"
                echo -e "${GREEN}üöÄ Pronto para deploy${NC}"
            else
                echo -e "${RED}‚ùå Falha no merge - verifique conflitos${NC}"
            fi
        else
            echo -e "${YELLOW}‚è∏Ô∏è Merge cancelado - branch preservada${NC}"
        fi
    else
        echo ""
        echo -e "${RED}üí• MERGE BLOQUEADO!${NC}"
        echo -e "${RED}‚ùå $ERRORS valida√ß√µes falharam${NC}"
        echo -e "${RED}üõ†Ô∏è Corrija os problemas antes de tentar merge${NC}"
        echo ""
        echo -e "${YELLOW}üí° Comandos √∫teis:${NC}"
        echo -e "${YELLOW}   ‚Üí npm run type-check    # Verificar TypeScript${NC}"
        echo -e "${YELLOW}   ‚Üí npm run lint:fix      # Corrigir linting${NC}"
        echo -e "${YELLOW}   ‚Üí npm run build         # Testar build${NC}"
        echo -e "${YELLOW}   ‚Üí npm run test:modules  # Testar m√≥dulos${NC}"
        exit 1
    fi
}

# Executar script
main "$@"